# Production Docker Compose Configuration
# Base configuration for production deployment

version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: secure_package_manager
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d secure_package_manager"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network
    restart: unless-stopped

  # Flask API Backend
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - FLASK_APP=app.py
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/secure_package_manager
      - NPM_PROXY_URL=${NPM_PROXY_URL:-https://registry.npmjs.org}
      - SECURE_REPO_URL=${SECURE_REPO_URL:-https://your-secure-registry.com}
      - ADFS_ENTITY_ID=${ADFS_ENTITY_ID}
      - ADFS_SSO_URL=${ADFS_SSO_URL}
      - ADFS_CERT_PATH=${ADFS_CERT_PATH:-/app/certs/adfs.crt}
      - TRIVY_URL=${TRIVY_URL:-http://trivy:4954}
      - TRIVY_TIMEOUT=${TRIVY_TIMEOUT:-300}
      - TRIVY_MAX_RETRIES=${TRIVY_MAX_RETRIES:-3}
    volumes:
      - ./certs:/app/certs:ro
      - package_cache:/app/package_cache
    ports:
      - "5000:5000"
    depends_on:
      db:
        condition: service_healthy
      trivy:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - app-network

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    environment:
      - VITE_API_URL=${FRONTEND_API_URL:-http://localhost:5000}
      - VITE_ADFS_ENTITY_ID=${ADFS_ENTITY_ID}
      - VITE_ADFS_SSO_URL=${ADFS_SSO_URL}
    ports:
      - "3000:3000"
    depends_on:
      - api
    networks:
      - app-network
    restart: unless-stopped

  # Trivy Security Scanner
  trivy:
    image: aquasec/trivy:latest
    command: ["server", "--listen", "0.0.0.0:4954", "--cache-dir", "/tmp/trivy-cache"]
    ports:
      - "4954:4954"
    volumes:
      - trivy_cache:/tmp/trivy-cache
    environment:
      - TRIVY_CACHE_DIR=/tmp/trivy-cache
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "trivy", "version"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

volumes:
  postgres_data:
  package_cache:
  trivy_cache:

networks:
  app-network:
    driver: bridge