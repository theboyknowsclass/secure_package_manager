services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: secure_package_manager
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - app-network

  # Flask API Backend
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - FLASK_APP=app.py
      - FLASK_ENV=development
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/secure_package_manager
      - NPM_PROXY_URL=${NPM_PROXY_URL:-https://registry.npmjs.org}
      - SECURE_REPO_URL=${SECURE_REPO_URL:-http://localhost:8080}
      - ADFS_ENTITY_ID=${ADFS_ENTITY_ID:-http://localhost:3000}
      - ADFS_SSO_URL=${ADFS_SSO_URL:-http://localhost:8081/sso}
      - ADFS_CERT_PATH=${ADFS_CERT_PATH:-/app/certs/adfs.crt}
    volumes:
      - ./backend:/app
      - ./certs:/app/certs
      - package_cache:/app/package_cache
    ports:
      - "5000:5000"
    depends_on:
      - db
    networks:
      - app-network

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    environment:
      - VITE_API_URL=http://localhost:5000
      - VITE_ADFS_ENTITY_ID=${ADFS_ENTITY_ID:-http://localhost:3000}
      - VITE_ADFS_SSO_URL=${ADFS_SSO_URL:-http://localhost:8081/sso}
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    depends_on:
      - api
    networks:
      - app-network

  # Mock IDP for Development
  mock-idp:
    build:
      context: ./mock-idp
      dockerfile: Dockerfile
    environment:
      - IDP_ENTITY_ID=${ADFS_ENTITY_ID:-http://localhost:3000}
      - IDP_SSO_URL=http://localhost:8081/sso
    ports:
      - "8081:8081"
    networks:
      - app-network

volumes:
  postgres_data:
  package_cache:

networks:
  app-network:
    driver: bridge
