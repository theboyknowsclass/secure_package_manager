# Base Docker Compose Configuration
# Contains all common services and configurations

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    networks:
      - app-network
    restart: unless-stopped

  # Flask API Backend
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    depends_on:
      - db
    environment:
      - FLASK_APP=app.py
      - APP_NAME=${APP_NAME}
      - FLASK_ENV=${FLASK_ENV}
      - FLASK_DEBUG=${FLASK_DEBUG}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:${DATABASE_PORT}/${POSTGRES_DB}
      - DATABASE_PORT=${DATABASE_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - JWT_SECRET=${JWT_SECRET}
      - FLASK_SECRET_KEY=${FLASK_SECRET_KEY}
      - IDP_SECRET_KEY=${IDP_SECRET_KEY}
      - SOURCE_REPOSITORY_URL=${SOURCE_REPOSITORY_URL}
      - TARGET_REPOSITORY_URL=${TARGET_REPOSITORY_URL}
      - TRIVY_URL=http://trivy:${TRIVY_PORT}
      - TRIVY_PORT=${TRIVY_PORT}
      - TRIVY_TIMEOUT=${TRIVY_TIMEOUT}
      - TRIVY_MAX_RETRIES=${TRIVY_MAX_RETRIES}
      - OAUTH_AUDIENCE=${OAUTH_AUDIENCE}
      - OAUTH_ISSUER=${OAUTH_ISSUER}
      - ADFS_ENTITY_ID=${ADFS_ENTITY_ID}
      - ADFS_SSO_URL=${ADFS_SSO_URL}
      - ADFS_CERT_PATH=${ADFS_CERT_PATH}
      - MAX_CONTENT_LENGTH=${MAX_CONTENT_LENGTH}
      - API_PORT=${API_PORT}
      - IDP_PORT=${IDP_PORT}
      - FRONTEND_PORT=${FRONTEND_PORT}
      - LOCALHOST=${LOCALHOST}
      - DOCKER_HOST=${DOCKER_HOST}
      - DEFAULT_ADMIN_USERNAME=${DEFAULT_ADMIN_USERNAME}
      - DEFAULT_ADMIN_PASSWORD=${DEFAULT_ADMIN_PASSWORD}
      - DEFAULT_ADMIN_EMAIL=${DEFAULT_ADMIN_EMAIL}
    volumes:
      - package_cache:/app/package_cache
    networks:
      - app-network
    restart: unless-stopped

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    environment:
      - VITE_API_URL=${VITE_API_URL}
      - VITE_ADFS_ENTITY_ID=${VITE_ADFS_ENTITY_ID}
    networks:
      - app-network
    restart: unless-stopped

  # Trivy Security Scanner
  trivy:
    image: aquasec/trivy:latest
    command: ["server", "--listen", "0.0.0.0:${TRIVY_PORT}", "--cache-dir", "/tmp/trivy-cache"]
    volumes:
      - trivy_cache:/tmp/trivy-cache
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "trivy", "version"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

volumes:
  postgres_data:
  package_cache:
  trivy_cache:

networks:
  app-network:
    driver: bridge
